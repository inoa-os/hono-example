<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>io.inoa.fleet</groupId>
		<artifactId>hono-mqtt-test</artifactId>
		<version>0.0.1-SNAPSHOT</version>
	</parent>

	<artifactId>hono-cloud-service-test</artifactId>
	<version>0.0.1-SNAPSHOT</version>

	<inceptionYear>2020</inceptionYear>
	<licenses>
		<license>
			<name>Apache License 2.0</name>
			<url>https://www.apache.org/licenses/LICENSE-2.0</url>
		</license>
	</licenses>

	<properties>

		<!-- ===================================================================== -->
		<!-- =============================== Build =============================== -->
		<!-- ===================================================================== -->

		<docker.postgres.version>13.1</docker.postgres.version>
		<docker.mysql.version>8.0</docker.mysql.version>
		<docker.image.version>${project.version}</docker.image.version>

		<!-- ===================================================================== -->
		<!-- ============================== Libaries ============================= -->
		<!-- ===================================================================== -->

		<version.org.mapstruct>1.4.2.Final</version.org.mapstruct>
		<version.org.testcontainers>1.15.3</version.org.testcontainers>
		<version.eclipse.hono>1.9.0</version.eclipse.hono>
	</properties>

	<dependencyManagement>
		<dependencies>
			<!-- build -->
			<dependency>
				<groupId>org.mapstruct</groupId>
				<artifactId>mapstruct</artifactId>
				<version>${version.org.mapstruct}</version>
			</dependency>
			<dependency>
				<groupId>org.testcontainers</groupId>
				<artifactId>testcontainers-bom</artifactId>
				<version>${version.org.testcontainers}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>org.testcontainers</groupId>
				<artifactId>junit-jupiter</artifactId>
				<version>${version.org.testcontainers}</version>
			</dependency>
			<dependency>
				<groupId>org.testcontainers</groupId>
				<artifactId>postgresql</artifactId>
				<version>${version.org.testcontainers}</version>
			</dependency>
			<dependency>
				<groupId>org.testcontainers</groupId>
				<artifactId>mysql</artifactId>
				<version>${version.org.testcontainers}</version>
			</dependency>
			<dependency>
				<groupId>org.testcontainers</groupId>
				<artifactId>testcontainers</artifactId>
				<version>${version.org.testcontainers}</version>
			</dependency>
		</dependencies>
	</dependencyManagement>
	<dependencies>

		<dependency>
			<groupId>org.eclipse.hono</groupId>
			<artifactId>hono-service-base-spring</artifactId>
			<version>${version.eclipse.hono}</version>
		</dependency>
		<dependency>
			<groupId>org.eclipse.hono</groupId>
			<artifactId>hono-client-application-kafka</artifactId>
			<version>${version.eclipse.hono}</version>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>1.2.3</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
			<version>2.4.8</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.eclipse.paho.client.mqttv3/mqttclientv3 -->
		<dependency>
			<groupId>org.eclipse.paho</groupId>
			<artifactId>org.eclipse.paho.client.mqttv3</artifactId>
			<version>1.2.1</version>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-logging</artifactId>
			<version>2.4.8</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-actuator-autoconfigure</artifactId>
			<version>2.4.8</version>
		</dependency>
		<dependency>
			<groupId>org.eclipse.hono</groupId>
			<artifactId>hono-service-device-registry-base</artifactId>
			<version>${version.eclipse.hono}</version>
		</dependency>
		<dependency>
			<groupId>org.eclipse.hono</groupId>
			<artifactId>hono-client-telemetry-amqp</artifactId>
			<version>${version.eclipse.hono}</version>
		</dependency>
		<dependency>
			<groupId>org.eclipse.hono</groupId>
			<artifactId>hono-client-telemetry-kafka</artifactId>
			<version>${version.eclipse.hono}</version>
		</dependency>
		<dependency>
			<groupId>io.opentracing.contrib</groupId>
			<artifactId>opentracing-tracerresolver</artifactId>
			<version>0.1.8</version>
		</dependency>

		<!-- testing -->

		<dependency>
			<groupId>io.vertx</groupId>
			<artifactId>vertx-junit5</artifactId>
			<version>3.9.7</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<version>2.4.8</version>
		</dependency>
		<dependency>
			<groupId>com.github.tomakehurst</groupId>
			<artifactId>wiremock-standalone</artifactId>
			<version>2.27.2</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>testcontainers</artifactId>
			<version>1.16.0</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>junit-jupiter</artifactId>
			<version>1.16.0</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>kafka</artifactId>
			<version>1.16.0</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
		</resources>
		<testResources>
			<testResource>
				<directory>mqtt-test-client/src/test/resources</directory>
				<filtering>true</filtering>
			</testResource>
		</testResources>
		<plugins>

			<!-- configure jar with libs and main class -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<annotationProcessorPaths>
						<path>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
							<version>${version.org.projectlombok}</version>
						</path>
						<path>
							<groupId>org.mapstruct</groupId>
							<artifactId>mapstruct-processor</artifactId>
							<version>${version.org.mapstruct}</version>
						</path>
					</annotationProcessorPaths>
				</configuration>
			</plugin>

			<!-- adjust jacoco excludes -->
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>**/*MapperImpl.class</exclude>
					</excludes>
				</configuration>
			</plugin>

			<!-- configure jar with lib and main class -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<configuration>
					<archive>
						<manifest>
							<addClasspath>true</addClasspath>
							<classpathPrefix>lib/</classpathPrefix>
							<mainClass>${exec.mainClass}</mainClass>
						</manifest>
					</archive>
				</configuration>
			</plugin>

			<!-- copy project dependencies -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<includeScope>runtime</includeScope>
							<outputDirectory>${project.build.directory}/lib</outputDirectory>
							<silent>true</silent>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- create container -->
			<plugin>
				<groupId>com.google.cloud.tools</groupId>
				<artifactId>jib-maven-plugin</artifactId>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>dockerBuild</goal>
						</goals>
						<configuration>
							<container>
								<jvmFlags>
									<jvmFlag>-XX:+ExitOnOutOfMemoryError</jvmFlag>
								</jvmFlags>
							</container>
							<to>
								<image>${docker.image.repository}/${project.artifactId}:${docker.image.version}</image>
							</to>
						</configuration>
					</execution>
				</executions>
			</plugin>

		</plugins>
	</build>

	<profiles>
		<profile>
			<id>check</id>
			<activation>
				<file>
					<exists>pom.xml</exists>
				</file>
			</activation>
			<build>
				<plugins>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
